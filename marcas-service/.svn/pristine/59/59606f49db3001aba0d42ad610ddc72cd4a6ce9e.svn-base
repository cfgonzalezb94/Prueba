/**
 * WorkerController.java
 * Copyright (c) SoftOne - Disponible All rights reserved.
 * 4/12/2014
 * ${version}
 */
package co.com.softone.disponible.services.rest;

import java.math.BigInteger;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import co.com.softone.disponible.logic.bo.EventWorker;
import co.com.softone.disponible.logic.bo.RoomDetail;
import co.com.softone.disponible.logic.bo.RoomMap;
import co.com.softone.disponible.logic.bo.WorkerDetail;
import co.com.softone.disponible.logic.entities.Service;
import co.com.softone.disponible.logic.entities.User;
import co.com.softone.disponible.logic.services.UserService;
import co.com.softone.disponible.logic.services.WorkerService;
import co.com.softone.disponible.service.gcm.Content;
import co.com.softone.disponible.service.gcm.SendMessage;

/**
 * Class to produce worker service json to android layer.
 * 
 * @author <a href="agaray@softone.com.co">Alexander Garay</a>
 *
 */
@Controller
@RequestMapping("/workerService")
public class WorkerController {
	
	@Autowired
    @Qualifier("workerService")
    private WorkerService workerService;
	
	@Autowired
    @Qualifier("userService")
    private UserService userService;
	
	/**
	 * <p>
	 * Update the current room to the worker.
	 * </p>
	 * 
	 * @param idWorker
	 * @param idRoom
	 * @return resultOk
	 */
    @RequestMapping(value = "currentRoom", method = RequestMethod.GET)
    public @ResponseBody boolean currentRoom(@RequestParam(value="idWorker") BigInteger idWorker, @RequestParam(value="idRoom") BigInteger idRoom) {
    	    		
    	 boolean result = workerService.updateCurrentRoom(idWorker, idRoom);
    	   
    	return result;

    }
    
    @RequestMapping(value = "workerState", method = RequestMethod.GET)
    public @ResponseBody boolean workerState(@RequestParam(value="idWorker") BigInteger idWorker, @RequestParam(value="idWorkerState") BigInteger idWorkerState, @RequestParam(value="timeAutoChange") Integer timeAutoChange, @RequestParam(value="timeChange") Long timeChange) {
    	    		
    	 boolean result = workerService.updateWorkerState(idWorker, idWorkerState, timeAutoChange, timeChange);
    	   
    	return result;

    }
    
    /**
     * <p>
     * Find all rooms in the system to build the map.
     * </p>
     * 
     * @return rooms
     */
    @RequestMapping(value = "findAllRoomsMap", method = RequestMethod.GET)
    public @ResponseBody List<RoomMap> findAllRoomsMap(){
    	return workerService.findAllRoomsMap();
    }
    
    /**
     * <p>
     * Find a room by its location.
     * </p>
     * 
     * @return rooms
     */
    @RequestMapping(value = "findRoomByLocation", method = RequestMethod.GET)
    public @ResponseBody RoomDetail findRoomByLocation(@RequestParam(value="latitude") double latitude, @RequestParam(value="longitude") double longitude){
    	return workerService.findRoomByLocation(latitude, longitude);
    }
    
    /**
     * <p>
     * Find the worker detail by its id.
     * </p>
     * @param id
     * @return
     */
    @RequestMapping(value = "findWorkerDetail", method = RequestMethod.GET)
    public WorkerDetail findWorkerDetail(@RequestParam(value="idWorker") BigInteger id){
    	return workerService.findWorkerDetail(id);
    }
    
    /**
     * <p>
     * Find all service by worker
     * </p>
     * 
     * @return 
     */
    @RequestMapping(value = "findWorkerService", method = RequestMethod.GET)
    public @ResponseBody List<Service> findWorkerService(@RequestParam(value="idWorker") BigInteger id){
    	return workerService.findWorkerService(id);
    }
    
    /**
     * <p>
     * Find all event by worker
     * </p>
     * 
     * @return 
     */
    @RequestMapping(value = "findEventWorker", method = RequestMethod.GET)
    public @ResponseBody List<EventWorker> findEventWorker(@RequestParam(value="idWorker") BigInteger idWorker){
    	return workerService.findEventByWorker(idWorker);
    }
    
    /**
     * <p>
     * Send a notification to the device of a user.
     * </p>
     * 
     * @param idUser
     * @param title
     * @param message
     * @return
     */
    @RequestMapping(value = "sendMessageGoogle", method = RequestMethod.GET)
    public @ResponseBody String sendMessageGoogle(@RequestParam(value="idUser" ) BigInteger idUser, @RequestParam(value="title") String title, @RequestParam(value="message") String message){
    	
    	User user = userService.findUserById(idUser);
    	
    	Content content = new Content();
    	content.addRegId(user.getDeviceId());
    	content.createData(title, message);
    	
    	SendMessage.post(content);
    	
    	return "";
    }

    /**
     * <p>
     * Update Services by worker
     * </p>
     * 
     * @return 
     */
    @RequestMapping(value = "addServiceWorker", method = RequestMethod.GET)
    public @ResponseBody boolean addServiceWorker(@RequestParam(value="idWorker") BigInteger idWorker, @RequestParam(value="serviceName") String serviceName){
    	return workerService.addServiceWorker(idWorker, serviceName);
    }
    
    /**
     * <p>
     * Delete Services by worker
     * </p>
     * 
     * @return 
     */
    @RequestMapping(value = "deleteServiceWorker", method = RequestMethod.GET)
    public @ResponseBody boolean deleteServiceWorker(@RequestParam(value="idWorker") BigInteger idWorker, @RequestParam(value="serviceName") String serviceName){
    	return workerService.deleteServiceWorker(idWorker, serviceName);
    }
    
    /**
     * <p>
     * Update Profile by worker
     * </p>
     * 
     * @return 
     */
    @RequestMapping(value = "updateProfileWorker", method = RequestMethod.GET)
    public @ResponseBody boolean updateProfileWorker(@RequestParam(value="idWorker") BigInteger idWorker, @RequestParam(value="firstName") String firstName,  @RequestParam(value="lastName") String lastName, @RequestParam(value="cellPhone") BigInteger cellphone){
    	return workerService.updateProfileWorker(idWorker, firstName, lastName, cellphone);
    }
    
}
