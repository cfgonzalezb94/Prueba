/**
 * SendMessage.java
 * Copyright (c) SoftOne - Disponible All rights reserved.
 * 11/12/2014
 * ${version}
 */
package co.com.softone.disponible.service.gcm;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import co.com.softone.disponible.logic.entities.User;
import co.com.softone.disponible.logic.services.UserService;

/**
 * Class to send message to google provider.
 * 
 * @author <a href="ehurtado@softone.com.co">Edwin Alejandro Hurtado</a>
 * 
 */
@Service("sendMessage")
public class SendMessage {	

	private Logger log = LoggerFactory.getLogger(SendMessage.class);
	
	@Autowired
    @Qualifier("userService")
    private UserService userService;
	
	private static final String API_KEY = "AIzaSyDVsxmFQ_ZIxZyRiU3C0B4_jwhv9KeBXh4";
	private static final String URL_GOOGLE_GCM = "https://android.googleapis.com/gcm/send";
	
	public void post(long idTransaccion, BigInteger idUser, String title, String message, String... newData) {

    	log.info("{} - post(idUser: {}, title: {}, message: {}, newData: {})",idTransaccion,idUser,title,message,newData);
    	
		try {

			User user = userService.findUserById(idUser);
        	
        	Content content = new Content();
        	content.addRegId(user.getDeviceId());
        	content.createData(title, message);
        	
            int index = 0;
            while(index < newData.length){
            	content.addNewData(newData[index], newData[index+1]);
                index = index + 2;
            }
        	
			// 1. URL
			URL url = new URL(URL_GOOGLE_GCM);

			// 2. Open connection
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();

			// 3. Specify POST method
			conn.setRequestMethod("POST");

			// 4. Set the headers
			conn.setRequestProperty("Content-Type", "application/json");
			conn.setRequestProperty("Authorization", "key=" + API_KEY);

			conn.setDoOutput(true);

			// 5. Add JSON data into POST request body

			// 5.1 Use Jackson object mapper to convert Contnet object into JSON
			ObjectMapper mapper = new ObjectMapper();

			// 5.2 Get connection output stream
			DataOutputStream wr = new DataOutputStream(conn.getOutputStream());

			for(String id : content.getRegistration_ids()){
				log.info("{} - id: {}",idTransaccion,id);
			}
			
			for(String data : content.getData().values()){
				log.info("{} - data: {}",idTransaccion,data);
			}
			
			// 5.3 Copy Content "JSON" into
			mapper.writeValue(wr, content);
			
			// 5.4 Send the request
			wr.flush();

			// 5.5 close
			wr.close();

			// 6. Get the response
			int responseCode = conn.getResponseCode();
			log.info("{} - ending 'POST' request to URL: {}",idTransaccion,url);
			log.info("{} - Response Code: {}",idTransaccion,responseCode);
			
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();

			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();

			// 7. Print result
			log.info("{} - result: {}",idTransaccion,response.toString());

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}
